/*
 * MQObjectAlter.java
 *
 * Created on 19 March 2007, 17:25
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package org.myorg.mqinterface;

import javax.swing.JOptionPane;
import org.myorg.gui.OutputTopComponent;
import org.myorg.model.ObjectRepository;
import org.myorg.model.GuiAdapter;
import org.myorg.model.WMQChannel;
import org.myorg.model.WMQObject;
import org.myorg.model.WMQProcess;
import org.myorg.model.WMQQueue;
import java.io.*;
import java.util.*;
import com.ibm.mq.*;
import com.ibm.mq.pcf.*;
import org.myorg.model.WMQQMgr;
/**
 *
 * @author pzssw6
 */
public class MQObjectAlter {

    private static ObjectRepository repository;    
    private String networkName;
        
    private WMQQMgr qMgr = null;    
    private String hostName = "localhost";
    private Integer port = Integer.valueOf("1414");
    private String svrConnChannel = "SYSTEM.DEF.SVRCONN";
    private HashMap statsMap = new HashMap();
    public boolean success = true;
    
    private String currentMQI ;
    private int openOptions, messageCount = 0 ;
    private MQQueueManager QMObject;
    private PCFMessageAgent agent = null;
    
    /**
     * Creates a new instance of MQObjectAlter
     */
    public MQObjectAlter(WMQObject mqObj, String attribute, Object value) {
        this.qMgr = mqObj.getParentQM();
        this.networkName = qMgr.getNetworkName();
        this.repository = ObjectRepository.findInstance(networkName);       
        
        this.hostName = qMgr.getHostName();
        this.port = qMgr.getPort();
        this.svrConnChannel = qMgr.getSvrConnChl();
//        System.out.println("ObjectStatusUpdate : " + hostName + " : " + port  + " : " + svrConnChannel  + " : "+ networkName);

        statsMap = MQConstants.getConstNameMap();

        initMQConnParameters();       

        if (initPCFAgent()) {
            AlterObject(mqObj, attribute, value);
//             if (attribute == "Channnel Status"){
//                 StopStartChannel(mqObj.getCaption(), (String) value);
//             }             
        } 
    }
    
    public static boolean Alteration(WMQObject mqObj, String attribute, Object value){
        MQObjectAlter instance = new MQObjectAlter(mqObj, attribute, value);
        return instance.success;
    }
    
    private void initMQConnParameters() {
        MQException.log = null;
        MQEnvironment.hostname = this.hostName;
        MQEnvironment.channel = this.svrConnChannel;
        MQEnvironment.port = this.port.intValue();
//        System.out.println("initMQConnParameters : " + MQEnvironment.hostname + MQEnvironment.channel + MQEnvironment.port);
    }
    private boolean initPCFAgent() {
        // Construct a PCFMessageAgent
        GuiAdapter.sendToOutputWindow("");        
        try {
            agent = new PCFMessageAgent(MQEnvironment.hostname, MQEnvironment.port, MQEnvironment.channel);           
//            System.out.println("initPCFAgent : " + MQEnvironment.hostname + MQEnvironment.port + MQEnvironment.channel);
        }
        catch (MQException ex)
	{
	   GuiAdapter.sendToOutputWindow("MQCONN Failed : Completion code " + ex.completionCode + " Reason code " + ex.reasonCode + "\n");
           GuiAdapter.addToOutputWindow(ex.toString());
           success = false ;
        }        
        return(success);
    }
   
     private void AlterObject(WMQObject mqObj, String attribute, Object value) {             
        PCFMessage request;
        PCFMessage[] responses;        
        PCFParameter p;        
        
        String objName = mqObj.getCaption();   
        int mqConst;
        
        mqConst = MQConstants.getConst(attribute);
                        
        if (attribute == "Channel Status"){ // right-click channel start/stop context menu
            if (value == "Stop"){
                request = new PCFMessage(CMQCFC.MQCMD_STOP_CHANNEL);
            } else {
                request = new PCFMessage(CMQCFC.MQCMD_START_CHANNEL);
            }        
            request.addParameter(CMQCFC.MQCACH_CHANNEL_NAME, objName);
        } else {
            if (mqObj.getClass() == WMQChannel.class){ // Channel            
                int chType = 0;
                Object attrObj = mqObj.getAttribute("Channel Type");
                if (attrObj != null){
                    chType = ((Integer)attrObj).intValue();
                }            
                request = new PCFMessage(CMQCFC.MQCMD_CHANGE_CHANNEL);            
                request.addParameter(CMQCFC.MQCACH_CHANNEL_NAME, objName);
                request.addParameter(CMQCFC.MQIACH_CHANNEL_TYPE, chType);
            } else if (mqObj.getClass() == WMQQueue.class){ // Queue
                int qType = 0;
                Object attrObj = mqObj.getAttribute("Q Type");
                if (attrObj != null){
                    qType = ((Integer)attrObj).intValue();
                }            
                request = new PCFMessage(CMQCFC.MQCMD_CHANGE_Q);            
                request.addParameter(CMQC.MQCA_Q_NAME, objName);
                request.addParameter(CMQC.MQIA_Q_TYPE, qType);            
            } else if (mqObj.getClass() == WMQProcess.class){  // Process (No "type")
                request = new PCFMessage(CMQCFC.MQCMD_CHANGE_PROCESS);            
                request.addParameter(CMQC.MQCA_PROCESS_NAME, objName);            
            } else if (mqObj.getClass() == WMQQMgr.class){  // Q Manager (No required attributes)
                request = new PCFMessage(CMQCFC.MQCMD_CHANGE_Q_MGR);
            } else {
                request = new PCFMessage(0);
            }
            // value is either integer or string - convert "Integer" object.        
            if (value.getClass() == Integer.class){ 
                request.addParameter(mqConst, ((Integer)value).intValue());  
            } else {
                request.addParameter(mqConst, (String)value);  
            }
        }
        
        System.out.println("----------------------------------------------------------");
        System.out.println("objName: " + objName + " attribute : " + attribute + " value : " + value.toString());
 
        try {
           responses = agent.send(request);
           
           System.out.println("@@@@@@@@@@@@ responses : " + responses.length);           
           System.out.println(responses[0].toString());
           GuiAdapter.sendToOutputWindow(responses[0].toString());
           
           JOptionPane.showMessageDialog(null, "Changing object \"" + objName + "\" attribute \""  +  attribute + "\" to " + value.toString() + "  \n\n" + responses[0].toString(), "Object Changed", JOptionPane.PLAIN_MESSAGE);
           
            
        } catch (MQException ex) {           
	   GuiAdapter.sendToOutputWindow("MQ error occured : Completion code " + ex.completionCode + " Reason code " + ex.reasonCode);
           System.out.println("MQ error occured : Completion code " + ex.completionCode + " Reason code " + ex.reasonCode);
           success = false;
        }
	catch (IOException ioe) {
	   GuiAdapter.sendToOutputWindow("IO error occured : " + ioe);
           System.out.println("IO error occured : " + ioe);
           success = false;
	}          
    }
    
}
