/*
 * Connect.java
 *
 * Created on 1 June 2006, 12:47
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package org.myorg.mqinterface;

import org.myorg.gui.OutputTopComponent;
import org.myorg.model.ObjectRepository;
import org.myorg.model.GuiAdapter;
import org.myorg.model.WMQChannel;
import org.myorg.model.WMQProcess;
import org.myorg.model.WMQQueue;
import java.io.*;
import java.util.*;
import com.ibm.mq.*;
import com.ibm.mq.pcf.*;
import org.myorg.model.WMQQMgr;

/**
 * 
 * 
 */
public class MQObjectDiscover extends Thread {
    private ObjectRepository repository;    
    private String networkName;
    private WMQQMgr qMgr = null;
    private String qMgrName = null;
    private ArrayList clusterNL = new ArrayList();
    private ArrayList clusterChannels = new ArrayList();
    private String hostName = "localhost";
    private Integer port = Integer.valueOf("1414");
    private String svrConnChannel = "SYSTEM.DEF.SVRCONN";
    private HashMap attrMap = new HashMap();
    private boolean completed = false;
    
    private boolean suppressAMQ = true;
    
    private String currentMQI ;
    private MQEnvironment mqenv = null;
    private MQQueueManager mqqmgr = null;
    private int openOptions, messageCount = 0 ;   
//    private PCFMessageAgent agent = new PCFMessageAgent();
    
    public MQObjectDiscover(ThreadGroup threadgroup, String threadname, WMQQMgr mgr) {        
        super(threadgroup, threadname);
        this.qMgr = mgr;
        this.networkName = mgr.getNetworkName();
        this.repository = ObjectRepository.findInstance(this.networkName);        
        this.hostName = mgr.getHostName();
        this.port = mgr.getPort();
        this.svrConnChannel = mgr.getSvrConnChl();
        System.out.println("QMgrDiscover for " + mgr.getCaption() + " : " + hostName + " : " + port  + " : " + svrConnChannel  + " : "+ networkName);
                
        attrMap = MQConstants.getConstNameMap();  
       
        System.out.println("QMgrDiscover2 for " + this.qMgr.getCaption() + " : " + hostName + " : " + port  + " : " + svrConnChannel  + " : "+ networkName);
        
    }
    
    public void run(){
        PCFMessageAgent agent = initPCFAgent();        
        
        if (agent == null){
            if (svrConnChannel == "SYSTEM.DEF.SVRCONN"){
                svrConnChannel = "SYSTEM.AUTO.SVRCONN";
            } else if (svrConnChannel != "SYSTEM.DEF.SVRCONN"){
                svrConnChannel = "SYSTEM.DEF.SVRCONN";
            }
            agent = initPCFAgent();            
        }        
        
        
        if (agent != null) {
                MapQMgr(agent);
                MapQueues(agent);
                MapChannels(agent);
                MapProcesses(agent);
                try {
                    agent.disconnect();
                } catch (MQException ex) {
                    ex.printStackTrace();
                }
//            }
        }
        this.completed = true;
    }
    
    public boolean isComplete(){
        return this.completed;
    }
    

    private PCFMessageAgent initPCFAgent() {        
//         Construct a PCFMessageAgent
//        GuiAdapter.addToOutputWindow("\n");
        mqenv = new MQEnvironment();
        mqenv.hostname = this.hostName;
        mqenv.port = this.port.intValue();
        mqenv.channel = this.svrConnChannel;
        
        Hashtable props = new Hashtable();
        props.put(MQC.CHANNEL_PROPERTY, this.svrConnChannel);
        props.put(MQC.HOST_NAME_PROPERTY, this.hostName);
        props.put(MQC.PORT_PROPERTY, this.port);
        props.put(MQC.TRANSPORT_PROPERTY, MQC.TRANSPORT_MQSERIES_CLIENT);
                
        PCFMessageAgent agent = null;
        try {            
            mqqmgr = new MQQueueManager("", props);           
            agent = new PCFMessageAgent(mqqmgr);
            agent.setCharacterSet(mqqmgr._getConnectionCCSID());
//            agent.connect(mqenv.hostname, mqenv.port, mqenv.channel);     
//            agent.connect(this.hostName, this.port.intValue(), this.svrConnChannel);            
            System.out.println("this.agent.getQManagerName() " + agent.getQManagerName() + " " + this.hostName + " " + this.port.intValue() + " " + this.svrConnChannel);
        }
        catch (MQException ex)
	{
//	   GuiAdapter.addToOutputWindow("MQCONN Failed : Completion code " + ex.completionCode + " Reason code " + ex.reasonCode + "\n");
//           GuiAdapter.addToOutputWindow(ex.toString());           
           agent = null;
           System.out.println("initPCFAgent failed... " + this.hostName + " " + this.port.intValue() + " " + this.svrConnChannel);          
        }
        return(agent);
    }
        
    private void MapQMgr(PCFMessageAgent agent) {
        HashMap MgrAttributes = new HashMap();
         // this hashmap contains attribute names and their corresponding values. 
         // The whole hashmap then becomes a propery of the WMQMgr object.        
        
        try {
            PCFMessage request;
            PCFMessage[] responses;
            
            // Build the PCF request
            request = new PCFMessage (CMQCFC.MQCMD_INQUIRE_Q_MGR);
            request.addParameter (CMQCFC.MQIACF_Q_MGR_ATTRS, new int [] { CMQCFC.MQIACF_ALL });
            
 
            System.out.println("this.agent.getQManagerName() " + agent.getQManagerName());            
            
            // Use the agent to send the request
            System.out.print ("Sending PCF request... ");
            responses = agent.send (request);
//            System.out.println ("Received reply.");
            qMgrName = responses[0].getStringParameterValue(2015);
            System.out.println("qMgrName.responses........" + qMgrName);
            Enumeration e = responses [0].getParameters ();
            
            while (e.hasMoreElements ()) {
                PCFParameter p = (PCFParameter) e.nextElement ();                
                if (attrMap.get(Integer.valueOf(String.valueOf(p.getParameter()))) != null){
                    MgrAttributes.put(attrMap.get(Integer.valueOf(String.valueOf(p.getParameter()))), p.getValue());
                } else {
                    MgrAttributes.put(Integer.valueOf(String.valueOf(p.getParameter())), p.getValue());  
                }    
            }
            
            //  call ReportCluster for each entry in turn.
            String clusNL = (String)MgrAttributes.get("Repository Namelist");
            if (clusNL != null){ 
                MapNamelist(agent, clusNL);
            }
                       
            // report the qmgr and transfer attributes hashmap
            updateQMgr(MgrAttributes);            
            
        } catch (MQException ex) {
//            GuiAdapter.addToOutputWindow("MQCONN Failed : Completion code " + ex.completionCode + " Reason code " + ex.reasonCode + "\n");
//            GuiAdapter.addToOutputWindow(ex.toString());
        } catch (ArrayIndexOutOfBoundsException ex) {
//            GuiAdapter.addToOutputWindow("MQCONN Failed: " + ex.getMessage() + "\n");
//            GuiAdapter.addToOutputWindow(ex.toString());
        } catch (NumberFormatException ex) {
//            GuiAdapter.addToOutputWindow("MQCONN Failed: " + ex.getMessage() + "\n");
//            GuiAdapter.addToOutputWindow(ex.toString());
        } catch (IOException ex) {
//            GuiAdapter.addToOutputWindow("MQCONN Failed: " + ex.getMessage() + "\n");
//            GuiAdapter.addToOutputWindow(ex.toString());            
        }        
    }   
    
    private void MapQueues(PCFMessageAgent agent) {
        int[] attrs = { CMQCFC.MQIACF_ALL };        
	PCFParameter[] parameters = {
            new MQCFST (CMQC.MQCA_Q_NAME, "*"),
            new MQCFIN (CMQC.MQIA_Q_TYPE, CMQC.MQQT_ALL), 
            new MQCFIL (CMQCFC.MQIACF_Q_ATTRS, attrs)
        };
	MQMessage[] responses;
	MQCFH cfh;
	PCFParameter p;
        String qName = "";
        String depth = "";
        
//        System.out.println("MapQueues........");
        
        try {
           responses = agent.send (CMQCFC.MQCMD_INQUIRE_Q, parameters); // send PCF command
//           System.out.println("MapQueues: " + responses.length);
           for (int i = 0; i < responses.length; i++) {
                cfh = new MQCFH (responses [i]);                
                if (cfh.reason == 0) {
                    // iterate through all attributes
                    HashMap qAttributes = new HashMap();                   
                    
                    for (int j = 0; j < cfh.parameterCount; j++) {
                        p = PCFParameter.nextParameter (responses [i]);
                        // if qname, then create new queue object
                        if (p.getParameter() == CMQC.MQCA_Q_NAME){
                            qName = (String)p.getValue();
                            qName = qName.trim();
                        }
                        // add attribute to attribute hashmap
                        if (attrMap.get(Integer.valueOf(String.valueOf(p.getParameter()))) != null){
                            String attrName = (String) attrMap.get(Integer.valueOf(String.valueOf(p.getParameter())));
                            qAttributes.put(attrName, p.getValue());            
                                                                    
                        } else {
                            qAttributes.put(Integer.valueOf(String.valueOf(p.getParameter())), p.getValue());  
                        }                        
		    }
                    // report the q and transfer attributes hashmap
                    if ((qName.length() < 4) || (!((qName.substring(0, 4).equalsIgnoreCase("AMQ.")) && (suppressAMQ)))){
                        reportQueue(qName, (HashMap) qAttributes);
                    }                    
                }                    
                else {
                    // Walk through the returned parameters describing the error
//                    GuiAdapter.addToOutputWindow("Error while getting queue names, PCF reason code :" + cfh.reason);
                }
           }           
        }
        catch (MQException ex)
            {
//	   GuiAdapter.addToOutputWindow("MQ error occured while getting queue names : Completion code " + ex.completionCode + " Reason code " + ex.reasonCode);
        }
	catch (IOException ioe)
            {
//	   GuiAdapter.addToOutputWindow("IO error occured while getting queue names : " + ioe);
	}        
    }
    
    private void MapChannels(PCFMessageAgent agent) {
        int [] 	attrs = { CMQCFC.MQIACF_ALL };        
	PCFParameter [] parameters = {          
            new MQCFST (CMQCFC.MQCACH_CHANNEL_NAME, "*"),
            new MQCFIL (CMQCFC.MQIACF_CHANNEL_ATTRS, attrs) 
	};
	
        MQMessage[] responses;
	MQCFH cfh;
	PCFParameter p;
        String chName = "";        

//        System.out.println("MapChannels........");
        
        try {           
           responses = agent.send (CMQCFC.MQCMD_INQUIRE_CHANNEL, parameters); // send PCF command           
           System.out.println("MapChannels: " + responses.length);
           for (int i = 0; i < responses.length; i++) {
                cfh = new MQCFH (responses [i]);                
                if (cfh.reason == 0){
                    // iterate through all attributes
                    HashMap chAttributes = new HashMap();   
                    
                    for (int j = 0; j < cfh.parameterCount; j++) {
                        p = PCFParameter.nextParameter (responses [i]);
			// if channelname, then create new channel object
                        if (p.getParameter() == CMQCFC.MQCACH_CHANNEL_NAME){
                            chName = (String)p.getValue();
                            chName = chName.trim();                            
                        }
                        // add attribute to attribute hashmap
                        if (attrMap.get(Integer.valueOf(String.valueOf(p.getParameter()))) != null){
                            chAttributes.put((String)attrMap.get(Integer.valueOf(String.valueOf(p.getParameter()))), p.getValue());
                        } else {
                            chAttributes.put(Integer.valueOf(String.valueOf(p.getParameter())), p.getValue());
                        }                                              
		    }
                    String conName = (String)chAttributes.get("Connection Name"); //quick fix to ignore connection-name " "
                    // If conName has value, report the connection to "reportQMgr". If new - is added to array of undiscoverdQMgrs
                    if ((conName != null) && (conName.charAt(0) > 48)){                        
                        ReportQMgr(conName);
                    } 
                    
                    String clusName = (String)chAttributes.get("Cluster Name");                               
                    // If clusName has value, report the connection to "reportCluster"                    
                    if ((clusName != null) && (clusName.charAt(0) > 48)){ //quick fix to ignore cluster-name " "
                        ReportCluster(clusName);
                    }
                    
                    //  call ReportCluster for each entry in turn.
                    String clusNL = (String)chAttributes.get("Cluster Namelist");
                    if (clusNL != null){ 
                        MapNamelist(agent, clusNL);
                    }                    
                    
                    // report channel and transfer attributes hashmap.
                    reportChannel(chName, (HashMap) chAttributes);
                }else{
                    // Walk through the returned parameters describing the error
//                        GuiAdapter.addToOutputWindow("Error while getting channel names, PCF reason code :" + cfh.reason);
                }
           }           
        } catch (MQException ex) {
//	   GuiAdapter.addToOutputWindow("MQ error occured while getting channel names : Completion code " + ex.completionCode + " Reason code " + ex.reasonCode);
        }
	catch (IOException ioe) {
//	   GuiAdapter.addToOutputWindow("IO error occured while getting channel names : " + ioe);
	}                
    }
    
    private void MapProcesses(PCFMessageAgent agent) {      
       int [] 	attrs = { CMQCFC.MQIACF_ALL };
       PCFParameter [] parameters = {
        new MQCFST (CMQC.MQCA_PROCESS_NAME, "*"), 
        new MQCFIL (CMQCFC.MQIACF_PROCESS_ATTRS, attrs) 
        };
	MQMessage[] responses;
	MQCFH cfh;
	PCFParameter p;
        String prName = "";        

        try {           
           responses = agent.send (CMQCFC.MQCMD_INQUIRE_PROCESS, parameters); // send PCF command           
           for (int i = 0; i < responses.length; i++) {
                cfh = new MQCFH (responses [i]);
                if (cfh.reason == 0){
                    // iterate through all attributes
                    HashMap prAttributes = new HashMap(); 
                    
                    for (int j = 0; j < cfh.parameterCount; j++)
			{
                        p = PCFParameter.nextParameter (responses [i]);
			// if process name, then name new process object
                        if (p.getParameter() == CMQC.MQCA_PROCESS_NAME){
                            prName = (String)p.getValue();
                            prName = prName.trim();                            
                        }
                        // add attribute to attribute hashmap
                        if (attrMap.get(Integer.valueOf(String.valueOf(p.getParameter()))) != null){
                            prAttributes.put((String)attrMap.get(Integer.valueOf(String.valueOf(p.getParameter()))), p.getValue());
                        }                                              
                    }   
                    // report the q and transfer attributes hashmap                    
                    reportProcess(prName, (HashMap) prAttributes);
                    }
                else
                    {
                    // Walk through the returned parameters describing the error
//                        GuiAdapter.addToOutputWindow("Error while getting process names, PCF reason code :" + cfh.reason);
                    }
           }
        }
        catch (MQException ex)
            {
//	   GuiAdapter.addToOutputWindow("MQ error occured while getting process names : Completion code " + ex.completionCode + " Reason code " + ex.reasonCode);
        }
	catch (IOException ioe)
            {
//	   GuiAdapter.addToOutputWindow("IO error occured while getting process names : " + ioe);
	}        
    }  
    
    private void MapNamelist(PCFMessageAgent agent, String clusNL) {
        int [] 	attrs = { CMQCFC.MQIACF_ALL };
        PCFParameter [] parameters = {
        new MQCFST (CMQC.MQCA_NAMELIST_NAME, clusNL), 
        new MQCFIL (CMQCFC.MQIACF_NAMELIST_ATTRS, attrs) 
        };
	MQMessage[] responses;
	MQCFH cfh;
	PCFParameter p;
        String nlName = "";        

        try {           
           responses = agent.send (CMQCFC.MQCMD_INQUIRE_NAMELIST, parameters); // send PCF command           
           for (int i = 0; i < responses.length; i++) {
                cfh = new MQCFH (responses [i]);
                if (cfh.reason == 0){
                    // iterate through all attributes
                    HashMap nlAttributes = new HashMap(); 
                    
                    for (int j = 0; j < cfh.parameterCount; j++)
			{
                        p = PCFParameter.nextParameter (responses [i]);
			// if process name, then name new process object
                        if (p.getParameter() == CMQC.MQCA_NAMELIST_NAME){
                            nlName = (String)p.getValue();
                            nlName = nlName.trim();                            
                        }
                        // add attribute to attribute hashmap
                        if (attrMap.get(Integer.valueOf(String.valueOf(p.getParameter()))) != null){
                            nlAttributes.put((String)attrMap.get(Integer.valueOf(String.valueOf(p.getParameter()))), p.getValue());
                        }                                              
                    }   
                    
                    String clusName = null;
                    String[] clusNames = null;
                    if (nlAttributes.get("Names") != null){
                        clusNames = ((String)nlAttributes.get("Names")).split(",");
                    }
                    for (i=0;i==clusNames.length;i++){
                        clusName = clusNames[i].trim();
                        // If clusName has value, report the connection to "reportCluster"     
                        if (clusName != null) { 
                            ReportCluster(clusName);
                        }
                    }      
               } else {
                    // Walk through the returned parameters describing the error
//                        GuiAdapter.addToOutputWindow("Error while getting process names, PCF reason code :" + cfh.reason);
               }
           }
        }
        catch (MQException ex)
            {
//	   GuiAdapter.addToOutputWindow("MQ error occured while getting process names : Completion code " + ex.completionCode + " Reason code " + ex.reasonCode);
        }
	catch (IOException ioe)
            {
//	   GuiAdapter.addToOutputWindow("IO error occured while getting process names : " + ioe);
	}        
    }
    
    //---------------------------------------Interface to the Model------------------------------------------
    
    // If clusName has value, report the cluster to the repository.
    private void ReportCluster(String clusName) {  //, String chName
        clusName = clusName.trim();
        repository.reportCluster(clusName, qMgr);
    }

    // If conName has value, report the connection to the repository. If new - is added to array of undiscoverdQMgrs
    private void ReportQMgr(String conName) {
//        System.out.println("ReportQueueManager : " + conName);
        conName = conName.trim();                    
        String[] connameArray = conName.split("\\(");
        String foundHostName = connameArray[0].trim();        
        if (foundHostName.equals("localhost")){
            // replace 'localhost' with valid IP address
            foundHostName = this.hostName;
        }
        Integer foundPort;
        if (connameArray.length > 1){
            foundPort = Integer.valueOf(String.valueOf(connameArray[1].split("\\)")[0]));
        } else {
            foundPort = Integer.valueOf("1414");
        }
        conName = foundHostName + "(" + foundPort + ")";
        repository.reportQMgr(conName, foundHostName, foundPort, qMgr);     
    }
    
    private void updateQMgr(HashMap qmgrAttr) {
        String qmgrName = (String) qmgrAttr.get("Q Mgr Identifier");
//        String qmgrName = qMgrName;
        System.out.println("UpdateQueueManager : " + qmgrName);
        qmgrName = qmgrName.trim();
        repository.updateQMgr(qmgrName, qmgrAttr, qMgr);     
    } 
    
    private void reportQueue(String qName, HashMap qAttr) {
//        System.out.println("ReportQueue: " + qName);
        qName = qName.trim();
        repository.reportQueue(qName, qAttr, qMgr);
    }
    private void reportChannel(String chName, HashMap chAttr) {
//        System.out.println("ReportChannel: " + chName);
        chName = chName.trim();
        repository.reportChannel(chName, chAttr, qMgr);
    }
    private void reportProcess(String prName, HashMap prAttr) {
        prName = prName.trim();
        repository.reportChannel(prName, prAttr, qMgr);
    }    

    
    
}
