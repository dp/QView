/*
 * MQObjectStatus.java
 *
 * Created on 2 March 2007, 09:39
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package org.myorg.mqinterface;

import org.myorg.gui.OutputTopComponent;
import org.myorg.model.ObjectRepository;
import org.myorg.model.GuiAdapter;
import org.myorg.model.WMQChannel;
import org.myorg.model.WMQProcess;
import org.myorg.model.WMQQueue;
import java.io.*;
import java.util.*;
import com.ibm.mq.*;
import com.ibm.mq.pcf.*;
import org.myorg.model.WMQQMgr;

/**
 * 
 * 
 */
public class MQObjectStatus extends Thread {
    private ObjectRepository repository;    
    private String networkName;
        
    private WMQQMgr qMgr = null;
    private ArrayList clusterNL = new ArrayList();
    private ArrayList clusterChannels = new ArrayList();
    private String hostName = "localhost";
    private Integer port = Integer.valueOf("1414");
    private String svrConnChannel = "SYSTEM.DEF.SVRCONN";
    private HashMap statsMap = new HashMap();
    private boolean completed = false;
    
    private String currentMQI ;
    private int openOptions, messageCount = 0 ;  
    private PCFMessageAgent agent = null;
    
    public MQObjectStatus(ThreadGroup threadgroup, String threadname, WMQQMgr theqmgr) { 
        super(threadgroup, threadname);
        this.qMgr = theqmgr;
        this.networkName = theqmgr.getNetworkName();
        this.repository = ObjectRepository.findInstance(networkName); 
        this.hostName = qMgr.getHostName();
        this.port = qMgr.getPort();
        this.svrConnChannel = qMgr.getSvrConnChl();
        System.out.println("ObjectStatusUpdate : " + hostName + " : " + port  + " : " + svrConnChannel  + " : "+ networkName);

        statsMap = MQConstants.getConstNameMap();
    }   
    
    public void run() {
        if (initPCFAgent()) {                        
            QMgrStatus();
            QueueStatus();
            ChannelStatus();      
        }
        this.completed = true;
    }        
    
    public boolean isComplete(){
        return this.completed;
    }
                           
    private boolean initPCFAgent() {
        // Construct a PCFMessageAgent
        GuiAdapter.sendToOutputWindow("");
        boolean success = true ;
        try {
            agent = new PCFMessageAgent();
            agent.connect(this.hostName, this.port.intValue(), this.svrConnChannel);           
//            System.out.println("initPCFAgent : " + MQEnvironment.hostname + MQEnvironment.port + MQEnvironment.channel);
        }
        catch (MQException ex)
	{
	   GuiAdapter.sendToOutputWindow("MQCONN Failed : Completion code " + ex.completionCode + " Reason code " + ex.reasonCode + "\n");
           GuiAdapter.addToOutputWindow(ex.toString());
           agent = null;
           success = false ;
        }
        return(success);
    }
        
    private void QMgrStatus() {
                        
        HashMap MgrStats = new HashMap(); 
            // this hashmap contains attribute names and their corresponding values. 
            // The whole hashmap then becomes a propery of the WMQMgr object.
        
        try {
            PCFMessage request;
            PCFMessage[] responses;
            
            // Build the PCF request
            // MQCMD_INQUIRE_Q_MGR_STATUS 161
            request = new PCFMessage (161);
            //MQIACF_Q_MGR_STATUS 1149 
            request.addParameter (1149, new int [] { CMQCFC.MQIACF_ALL });

            // Use the agent to send the request
            System.out.print ("Sending PCF request... ");
            responses = agent.send (request);
            System.out.println ("Received reply.");
            
//            System.out.println("QMgrStats........");
            
            Enumeration e = responses [0].getParameters ();
            
            System.out.println("QMgrStats: " + e.toString());
            
            while (e.hasMoreElements ()) {
                PCFParameter p = (PCFParameter) e.nextElement ();                
                if (statsMap.get(Integer.valueOf(String.valueOf(p.getParameter()))) != null){
                    MgrStats.put(statsMap.get(Integer.valueOf(String.valueOf(p.getParameter()))), p.getValue());
                } else {
                    MgrStats.put(Integer.valueOf(String.valueOf(p.getParameter())), p.getValue());  
                }    
            }
            
            // report the qmgr and transfer attributes hashmap
//            updateQMgr(qmgrName, MgrStats);
            updateQMgrStats(MgrStats);
            
        } catch (MQException ex) {
            GuiAdapter.sendToOutputWindow("MQCONN Failed : Completion code " + ex.completionCode + " Reason code " + ex.reasonCode + "\n");
            GuiAdapter.addToOutputWindow(ex.toString());
        } catch (ArrayIndexOutOfBoundsException ex) {
            GuiAdapter.sendToOutputWindow("MQCONN Failed: " + ex.getMessage() + "\n");
            GuiAdapter.addToOutputWindow(ex.toString());
        } catch (NumberFormatException ex) {
            GuiAdapter.sendToOutputWindow("MQCONN Failed: " + ex.getMessage() + "\n");
            GuiAdapter.addToOutputWindow(ex.toString());
        } catch (IOException ex) {
            GuiAdapter.sendToOutputWindow("MQCONN Failed: " + ex.getMessage() + "\n");
            GuiAdapter.addToOutputWindow(ex.toString());
        }
    }   
    
    private void QueueStatus() {
        int[] attrs = { CMQCFC.MQIACF_ALL };        
	PCFParameter[] parameters = {
            new MQCFST (CMQC.MQCA_Q_NAME, "*"),
            new MQCFIN (CMQC.MQIA_Q_TYPE, CMQC.MQQT_ALL), 
            new MQCFIL (CMQCFC.MQIACF_Q_ATTRS, attrs)
        };
	MQMessage[] responses;
	MQCFH cfh;
	PCFParameter p;
        String qName = "";
        String depth = "";
        
//        System.out.println("QueueStats........");
        
        try {
           responses = agent.send (CMQCFC.MQCMD_INQUIRE_Q_STATUS, parameters); // send PCF command
           System.out.println("QueueStats: " + responses.length);
           for (int i = 0; i < responses.length; i++) {
                cfh = new MQCFH (responses [i]);                
                if (cfh.reason == 0) {
                    // iterate through all attributes
                    HashMap qStats = new HashMap(); 
                    
                    for (int j = 0; j < cfh.parameterCount; j++) {
                        p = PCFParameter.nextParameter (responses [i]);
                        // if qname, then create new queue object
                        if (p.getParameter() == CMQC.MQCA_Q_NAME){
                            qName = (String)p.getValue();
                            qName = qName.trim();
                        }
                        // add attribute to attribute hashmap
                        if (statsMap.get(Integer.valueOf(String.valueOf(p.getParameter()))) != null){
                            qStats.put(statsMap.get(Integer.valueOf(String.valueOf(p.getParameter()))), p.getValue());                            
                        } else {
                            qStats.put(Integer.valueOf(String.valueOf(p.getParameter())), p.getValue());  
                        }                        
		    }
                    // report the q and transfer attributes hashmap                    
                    updateQStats(qName, (HashMap) qStats);
                }                    
                else {
                    // Walk through the returned parameters describing the error
                    GuiAdapter.sendToOutputWindow("Error while getting queue names, PCF reason code :" + cfh.reason);
                }
           }           
        }
        catch (MQException ex)
            {
	   GuiAdapter.sendToOutputWindow("MQ error occured while getting queue names : Completion code " + ex.completionCode + " Reason code " + ex.reasonCode);
        }
	catch (IOException ioe)
            {
	   GuiAdapter.sendToOutputWindow("IO error occured while getting queue names : " + ioe);
	}        
    }
    
    private void ChannelStatus() {
        PCFMessage request;
        PCFMessage[] responses;
        
        PCFParameter p;
        String chName = "";        
        
        request = new PCFMessage(CMQCFC.MQCMD_INQUIRE_CHANNEL_STATUS);
        request.addParameter(CMQCFC.MQCACH_CHANNEL_NAME, "*");
        
//        System.out.println("ChannelStats........");
        
        try {
           responses = agent.send(request);
           System.out.println("ChannelStats: " + responses.length);
           for (int i = 0; i < responses.length; i++) {                
                HashMap chStats = new HashMap();
                chName = responses[i].getStringParameterValue(CMQCFC.MQCACH_CHANNEL_NAME);
                
                Enumeration f = responses [i].getParameters ();
                while (f.hasMoreElements ()) {
                    p = (PCFParameter) f.nextElement ();
                    Integer param = Integer.valueOf(String.valueOf(p.getParameter()));
                    if (statsMap.get(param) != null){
                         chStats.put(statsMap.get(param), p.getValue());
                    } else {
                        chStats.put(Integer.valueOf(String.valueOf(p.getParameter())), p.getValue());  
                    }                        
                }
//                System.out.println("ChannelStats HashMap: " + chName + "  " + chStats.size());                
                updateChStats(chName, (HashMap) chStats);
           }           
        } catch (MQException ex) {
	   GuiAdapter.sendToOutputWindow("MQ error occured while getting channel names : Completion code " + ex.completionCode + " Reason code " + ex.reasonCode);
        }
	catch (IOException ioe) {
	   GuiAdapter.sendToOutputWindow("IO error occured while getting channel names : " + ioe);
	}          
    }
    
    
    //---------------------------------------Interface to the Model------------------------------------------
    
    
    private void updateQMgrStats(HashMap qmgrStats) {
        String qmgrName = qMgr.getUniqueName();
//        System.out.println("UpdateQMgrStats : " + qmgrName);
        qmgrName = qmgrName.trim();
        repository.updateQMgrStats(qMgr, qmgrStats);     
    } 
    
    private void updateQStats(String qName, HashMap qStats) {
//        System.out.println("updateQStats: " + qName);
        String qmgrName = qMgr.getUniqueName();
        qName = qName.trim();
        repository.updateQueueStats(qmgrName, qName, qStats);
    }
    private void updateChStats(String chName, HashMap chStats) {
//        System.out.println("UpdateChStats: " + chName);
        String qmgrName = qMgr.getUniqueName();
        chName = chName.trim();
        repository.updateChannelStats(qmgrName, chName, chStats);
    }

     
}

