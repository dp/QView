/*
 * ModelAdapter.findInstance().java
 *
 * Created on 7 March 2007, 15:47
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package org.myorg.gui;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.awt.event.ActionEvent;
import javax.swing.AbstractAction;
import javax.swing.Action;
import org.myorg.gui.hypertree.HTreeTopComponent;
import org.myorg.gui.nbnode.LeafNode;
import org.myorg.gui.nbnode.ParentNode;
import org.myorg.gui.nbnode.RefreshNodeAction;
import org.myorg.model.GuiAdapter;
import org.myorg.model.WMQCluster;
import org.myorg.mqinterface.Discovery;
import org.myorg.mqinterface.StatusPoll;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.actions.NewAction;
import org.openide.actions.OpenLocalExplorerAction;
import org.openide.actions.PropertiesAction;
import org.openide.actions.ToolsAction;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Node;
import org.openide.util.actions.SystemAction;
import org.myorg.gui.hypertree.HTNode;
import org.myorg.gui.hypertree.HTSimpleNode;
import org.myorg.gui.nbnode.NodeExplorerTopComponent;
import org.myorg.gui.nbnode.RootNode;
import org.myorg.model.ConnectPoint;
import org.myorg.model.ObjectRepository;
import org.myorg.model.WMQChannel;
import org.myorg.model.WMQObject;
import org.myorg.model.WMQQMgr;
import org.myorg.model.WMQQueue;
import org.myorg.mqinterface.MQConstants;
import org.myorg.mqinterface.MQObjectAlter;

/**
 *
 * @author pzssw6
 */
public class ModelAdapter {
    private static HashMap editablePropsMap = new HashMap();
    private static HashMap valTypeMap = new HashMap();
    
    /** Creates a new instance of ModelAdapter */
    public ModelAdapter() {
    } 
       
    
//-----------------Property window-----------------------------------------------    
    
    public static boolean setProperty(String networkName, String propSetName, String NodeKey, String propKey, Object nueValue){        
        ObjectRepository repository = ObjectRepository.findInstance(networkName);
        HashMap propsMap = new HashMap();
        Object value = revertValues(nueValue);
        boolean success = true;
        System.out.println("setProperty : " + networkName + NodeKey + propSetName + propKey + nueValue);        
        if (repository.getFromRepository(NodeKey) != null){
            WMQObject mqobj = repository.getFromRepository(NodeKey);            
            if (propSetName == "Attributes"){
                System.out.println("  Called setAttribute : " + propKey + value);
                success = alterObject(mqobj, propKey, value);
                if (success){
                    mqobj.setAttribute(propKey, value);                        
                }                    
            } else if (propSetName == "Status"){
                System.out.println("  Called setStatus : " + propKey + value);
                success = alterObject(mqobj, propKey, value);
                if (success){
                    mqobj.setStatus(propKey, value);                     
                }
            } else if (propSetName == "Discovery"){
                System.out.println("  Called setDiscover : " + propKey + value);
                mqobj.setDiscovery(propKey, value);
            }
        } else if (propSetName == "Discovery Config"){
            System.out.println("  Called setAttribute : " + propKey + value);
            ConnectPoint.setRootAttr(propKey, value);
        } else { //ConnectPoint
            System.out.println("  Called cp.setValue : " + propKey + value);
            ConnectPoint cp = (ConnectPoint)ConnectPoint.findInstance(NodeKey);  
            cp.setDiscovery(propKey, value);
            if (propKey == "Monitoring Interval"){
                cp.setTimer();
            }
        }

        return success;
    }
    
//    public static Object getProperty(String networkName, String propSetName, String NodeKey, String propKey, String parent){        
//        HashMap propsMap = new HashMap();
//        HashMap attrMap = new HashMap();
//        String value = null;     
//        propsMap = getProperties(networkName, NodeKey, parent);
//        attrMap = (HashMap) propsMap.get(propSetName);
//        return attrMap.get(propKey); 
//    }    
    
    public static HashMap getProperties(String networkName, String key, String parent){
        ObjectRepository repository = ObjectRepository.findInstance(networkName);
        HashMap propsMap = new HashMap();
        HashMap valTypeMap = new HashMap();
        if (repository.getFromRepository(key) != null){
            WMQObject mqobj = repository.getFromRepository(key);
            HashMap statusMap = new HashMap();
            HashMap attrMap = new HashMap();
            HashMap discMap = new HashMap();
//            System.out.println("Object name : " + mqobj.getUniqueName());
//            System.out.println("Object class : " + mqobj.getClass().toString());
            if ((mqobj.getClass() == WMQQMgr.class) || (mqobj.getClass() == WMQQueue.class) || (mqobj.getClass() == WMQChannel.class)){
                discMap = updateValues(mqobj.getDiscoveryMap());
                statusMap = updateValues(mqobj.getStatiiMap());
                attrMap = updateValues(mqobj.getAttributesMap());                
                propsMap.put("Discovery", discMap);
                propsMap.put("Status", statusMap);                
                propsMap.put("Attributes", attrMap);                
            } else {
                attrMap = updateValues(mqobj.getAttributesMap());
                propsMap.put("Attributes", attrMap);
            }            
        } else if ((String) key == "Queues"){
            WMQQMgr mgr = null;
            mgr = (WMQQMgr)repository.getFromRepository(parent);
            Object value = "";
            HashMap statusMap = new HashMap();
            if (mgr != null){
                ArrayList qlist = mgr.getQueues();            
                Iterator e = qlist.iterator();
                while (e.hasNext()) {
                    String item = (String) e.next();
                    WMQQueue que = (WMQQueue) repository.getFromRepository(item);
                    value = que.getAttribute("Current Q Depth");
                    if (value != null){
                        statusMap.put(que.getCaption(), value);   
                    } else {
                        statusMap.put(que.getCaption(), "none");
                    }                                 
                }
            }
            propsMap.put("Status", statusMap);
        } else if ((String) key == "Channels"){
            WMQQMgr mgr = null;
            mgr = (WMQQMgr)repository.getFromRepository(parent);
            Object value = "";
            HashMap statusMap = new HashMap();
            if (mgr != null){
                ArrayList chlist = mgr.getChannels();            
                Iterator e = chlist.iterator();
                while (e.hasNext()) {
                    String item = (String) e.next();
                    WMQChannel ch = (WMQChannel) repository.getFromRepository(item);
                    value = MQConstants.getStatusName("ChannelStatus", (Integer) ch.getStatus("Channel Status"));
                    if (value != null){
                        statusMap.put(ch.getCaption(), value);    
                    } else {
                        statusMap.put(ch.getCaption(), "Inactive");
                    }
                }
                
            }
            propsMap.put("Status", statusMap);
        } else if ((String) key == "Unclustered"){
            HashMap statusMap = new HashMap();
            statusMap.put("Catagory", "Unclustered");
            propsMap.put("Attributes", statusMap);
        } else if (parent == null){
            propsMap.put("Discovery Config", updateValues(ConnectPoint.getRootAttrMap()));
        } else { //ConnectPoint 
            ConnectPoint cp = (ConnectPoint)ConnectPoint.findInstance(key);  
            propsMap.put("Discovery", updateValues(cp.getDiscoveryMap()));
        }        
        return propsMap;
    }
    
    public static HashMap updateValues(HashMap thisMap){
        String valType = null;
        Object value = null;
        Boolean boolValue = null;
        ArrayList dropdown = null;
        String stringValue = null;
        String item = null;
        Iterator f = thisMap.keySet().iterator();
        while (f.hasNext()){
            item = (String) f.next();
            value = thisMap.get(item);
            valType = getValType(item);            
            if (valType == "Boolean"){                
                boolValue = Boolean.valueOf(((Integer)value).intValue() == 1);
                thisMap.put(item, boolValue);
//                System.out.println("*****" + item + " : " + value + " : " + boolValue);
            } else if (valType == "ArrayList"){
//                dropdown = MQConstants... TODO
            } else if (value.getClass() == Integer.class) {
                stringValue = MQConstants.getStatusName(item, (Integer) value);
                if (stringValue != null){
                    thisMap.put(item, stringValue);
                }
            }
        }
        return thisMap;
    }
    
    public static Object revertValues(Object nueValue){
        Object replaceValue = null;
        if (nueValue.getClass() == Boolean.class){
            if (((Boolean) nueValue).booleanValue()){
                replaceValue = Integer.valueOf(String.valueOf("1"));
            } else {
                replaceValue = Integer.valueOf(String.valueOf("0"));
            }
//        } else if (nueValue.getClass() == ArrayList.class){
            // parse dropdown... TODO
        } else {
            replaceValue = nueValue;
        }
        return replaceValue;
    }    
  
//    public static boolean isHidden(String propSet){        
//        boolean isHidden = false;
//        if (propSet == "Attributes"){
//            isHidden = true;
//        } 
//        return isHidden;
//    }
    
    public static boolean isEditable(String item, String propSet){        
        boolean isEditable = false;
        if (editablePropsMap.isEmpty()){
            setEditableMap();            
        }        
        isEditable = (((ConnectPoint.getRootAttr("Admin Enabled") == Integer.valueOf(String.valueOf("1"))) && editablePropsMap.containsKey(item)) || (propSet.startsWith("Discovery")));      
        return isEditable;
    }    
    
    public static String getValType(String item){
        if (valTypeMap.isEmpty()){
            setValTypeMap();
        }        
        return (String) valTypeMap.get(item);
    }
         
    public static void setEditableMap(){
        editablePropsMap.put("Max Msg Length", null);
        editablePropsMap.put("Max Q Depth", null);
        editablePropsMap.put("Def Priority", null);
        editablePropsMap.put("Backout Threshold", null);
        editablePropsMap.put("Short Retry Interval", null);
        editablePropsMap.put("Long Retry Interval", null);
        editablePropsMap.put("Heartbeat Interval", null);
        editablePropsMap.put("Disc Interval", null);
        editablePropsMap.put("Channel Desc", null);
        editablePropsMap.put("Inhibit Put", null);
        editablePropsMap.put("Inhibit Get", null);
        editablePropsMap.put("Def Persistence", null);        
//        editablePropsMap.put("Q Threshold Critical", null);
//        editablePropsMap.put("Q Threshold Warning", null);
        editablePropsMap.put("Accounting Conn Override", null);
        editablePropsMap.put("Inhibit Event", null);
        editablePropsMap.put("Channel Event", null);
        editablePropsMap.put("Performance Event", null);
        editablePropsMap.put("Start Stop Event", null);        
        editablePropsMap.put("Authority Event", null);
        editablePropsMap.put("Local Event", null);
        editablePropsMap.put("Logger Event", null);
        editablePropsMap.put("User Data", null);
        editablePropsMap.put("Trigger Data", null);
        editablePropsMap.put("Trigger Control", null);
        
        editablePropsMap.put("Q Threshold Critical", null);
        editablePropsMap.put("Q Threshold Warning", null);
        editablePropsMap.put("Polling Enabled", null);
        editablePropsMap.put("Monitoring Enabled", null);
        editablePropsMap.put("Monitoring Interval", null);
        editablePropsMap.put("Admin Enabled", null);
        editablePropsMap.put("SvrConnChl", null);                
    }
    
    public static void setValTypeMap(){
        // returns non-Integer data type, eg, Boolean, ArrayList (for dropdowns - TODO).
        valTypeMap.put("Inhibit Put", "Boolean");
        valTypeMap.put("Inhibit Get", "Boolean");
        valTypeMap.put("Def Persistence", "Boolean");
        valTypeMap.put("Monitoring Enabled", "Boolean");
        valTypeMap.put("Admin Enabled", "Boolean");
        valTypeMap.put("Accounting Conn Override", "Boolean");
        valTypeMap.put("Inhibit Event", "Boolean");
        valTypeMap.put("Channel Event", "Boolean");
        valTypeMap.put("Performance Event", "Boolean");
        valTypeMap.put("Start Stop Event", "Boolean");
        valTypeMap.put("Authority Event", "Boolean");
        valTypeMap.put("Local Event", "Boolean"); 
        valTypeMap.put("Logger Event", "Boolean"); 
        valTypeMap.put("Trigger Control", "Boolean"); 
    }
//-----------------NBNode metrics-----------------------------------------------  
    
    public static HashMap getNodeMetricMap(HTNode node){
        HashMap metricMap = new HashMap();
        String metric = null;
        String state = null;
        int minSize = 6;
        int maxSize = 18;
        int size = 6;
        int depth = 0;        
        int warn = 1;
        int crit = 1;
        HTSimpleNode simpleNode = (HTSimpleNode)node;
        WMQObject obj = simpleNode.getMQObject();        
        if (obj.getClass() == WMQQueue.class){            
            Object depthField = ((WMQQueue)obj).getAttribute("Current Q Depth");            
            Object maxDepthField = ((WMQQueue)obj).getAttribute("Max Q Depth");            
            if ((depthField != null) && (maxDepthField != null) && (depthField.getClass() == Integer.class)) {                
                // depth for calculations, metric for display string.
                depth = ((Integer)depthField).intValue();
                metric = ((Integer)depthField).toString();
                
                boolean isMonitored = ((((Integer)((WMQQueue)obj).getDiscovery("Monitoring Enabled")).intValue() == 1) && (((Integer)((WMQQueue)obj).getParentQM().getDiscovery("Monitoring Enabled")).intValue() == 1));
                if (isMonitored){ 
                    int maxDepth = ((Integer)maxDepthField).intValue();
                    int relativeSize = 1;
                    
                    // get warning threshold from heirarchy of objects.
                    String warnThreshold = (String) ((WMQQueue)obj).getDiscovery("Q Threshold Warning");
                    if (warnThreshold == ""){
                        warnThreshold = (String) ((WMQQueue)obj).getParentQM().getDiscovery("Q Threshold Warning");
                    }
                    if (warnThreshold == ""){
                        warnThreshold = (String) ConnectPoint.findInstance(((WMQQueue)obj).getNetworkName()).getDiscovery("Q Threshold Warning");
                    }
                    if (warnThreshold != ""){
                        try{                    
                            warn = Integer.parseInt(warnThreshold.split("%")[0]);                       
                        } catch (NumberFormatException ex) {
                            warn = maxDepth;
                            warnThreshold = "";                
                        }
                    } else {
                        warn = maxDepth;
                        warnThreshold = "";    
                    }

                    if (warnThreshold.endsWith("%")){                    
                        float percent = (float)warn / (float)100;
                        warn = (int)((float)percent*(float)maxDepth);
                    }                    
                    
                     // get critical threshold from heirarchy of objects.
                    String critThreshold = (String) ((WMQQueue)obj).getDiscovery("Q Threshold Critical");
                    if (critThreshold == ""){
                        critThreshold = (String) ((WMQQueue)obj).getParentQM().getDiscovery("Q Threshold Critical");
                    }
                    if (critThreshold == ""){
                        critThreshold = (String) ConnectPoint.findInstance(((WMQQueue)obj).getNetworkName()).getDiscovery("Q Threshold Critical");
                    }
                    if (critThreshold != ""){                
                        try{
                            crit = Integer.parseInt(critThreshold.split("%")[0]);                        
                        } catch (NumberFormatException ex) {
                            crit = maxDepth;
                            critThreshold = "";
                        }
                    } else {
                        crit = maxDepth;
                        critThreshold = "";
                    }
                    
                    // if percentage, calculate threshold
                    if (critThreshold.endsWith("%")){
                        float percent = (float)crit / (float)100;                    
                        crit = (int)((float)percent * (float)maxDepth);
                    }
                    
                    // calculate relative size of HT circle
                    relativeSize = (int)(((float)depth/(float)crit)*(float)maxSize);
                    relativeSize = Math.min(relativeSize, maxSize);                    
                    size = Math.max(relativeSize, minSize);

                    if (depth>crit){
                        state = "crit";
                    } else if (depth>warn){
                        state = "warn";
                    } else {
                        state = "ok";
                    }
                } else {                               
                    size = minSize;
                    state = "ok";
                }
            } else {
                metric = "";                
                size = minSize;
                state = "none";
            }            
        } else if (obj.getClass() == WMQChannel.class){
            metric = MQConstants.getStatusName("Channel Status", (Integer) ((WMQChannel)obj).getStatus("Channel Status"));  
//            System.out.println("get chstatus : " + ((WMQChannel)obj).getStatus("Channel Status").toString());
//            metric = (String) ((WMQChannel)obj).getStatus("Channel Status");
//            metric = null;
            if ((metric == null) || (metric == "Inactive")){ 
                metric = "";
                state = "none";
            } else if ((metric == "Binding") || (metric == "Retrying")){
                state = "crit";
            }else if ((metric == "Stopped") || (metric == "Stopping")){
                state = "warn";
            } else {
                state = "ok";
            }
            size = minSize;            
        }
        metricMap.put("metric", metric);
        metricMap.put("size", Integer.valueOf(String.valueOf(size)));
        metricMap.put("state", state);
        return metricMap;
    }
    
//-----------------Alter Objects-----------------------------------------------      
    
    public static boolean alterObject(WMQObject mqobj, String key, Object value){                
        boolean success = MQObjectAlter.Alteration(mqobj, key, value);
        NodeExplorerTopComponent.findInstance().requestActive();
        RootNode.refreshNode();
        HTreeTopComponent.refreshInstance(mqobj.getNetworkName());
        return success;
    }    
    
//-----------------Context Menu-----------------------------------------------          

    public static void nodeChanged(HTSimpleNode selectedNode, String networkName){
        NodeExplorerTopComponent.findInstance().selectNode(selectedNode.getUniqueName(), networkName);
    }
    
    public static Action[] getContext(AbstractNode node){
        WMQObject mqObj = null;
        if (node.getClass() == LeafNode.class){
            mqObj = ((LeafNode)node).getMQObject();            
        } else if (node.getClass() == ParentNode.class){
            mqObj = ((ParentNode)node).getMQObject();
        } 
        return getNBNodeActions(node, mqObj);
    }
    public static Action[] getContext(HTSimpleNode node){
        WMQObject mqObj = node.getMQObject();        
        return getHTNodeActions(node, mqObj);
    }
    
    public static Action[] getNBNodeActions(AbstractNode node, WMQObject mqobject) {
        Action[] result = null;
        if (mqobject != null){
            if (mqobject.getClass() == WMQQueue.class){           
                result = new Action[] {
                    new ModelAdapter.findInstance().EnableAction(mqobject),               
                    new ModelAdapter.findInstance().BrowseAction(mqobject),
    //                new PutAction(this.mqobject),
                };        
            } else if (mqobject.getClass() == WMQChannel.class){
                result = new Action[] {
                    new ModelAdapter.findInstance().StartAction(mqobject),
                }; 
            } else if (mqobject.getClass() == WMQQMgr.class){
                result = new Action[] {                 
                };
            } else if (mqobject.getClass() == WMQCluster.class){
                result = new Action[] { 
                };
            }    
        } else if ((node.getValue("nodeType") == "Unclustered") || (node.getValue("nodeType") == "Channels")) {
            result = new Action[] {
            };
        } else if ((node.getValue("nodeType") == "Queues") || (node.getValue("nodeType") == "Channels")) {
            result = new Action[] {
            };
        }  
        return result;
    }
    public static Action[] getHTNodeActions(HTSimpleNode node, WMQObject mqobject) {
        Action[] result = null;
        if (mqobject.getClass() == WMQQueue.class){           
            result = new Action[] {            
                new ModelAdapter.findInstance().RefreshAction(mqobject),
//                new ModelAdapter.findInstance().PropertiesAction(mqobject),
                null,
                new ModelAdapter.findInstance().EnableAction(mqobject),                
                new ModelAdapter.findInstance().BrowseAction(mqobject),
//                new PutAction(this.mqobject),
            };        
        } else if (mqobject.getClass() == WMQChannel.class){
            result = new Action[] {            
                new ModelAdapter.findInstance().RefreshAction(mqobject),
//                new ModelAdapter.findInstance().PropertiesAction(mqobject),
                null,
                new ModelAdapter.findInstance().StartAction(mqobject),
            }; 
        } else if (mqobject.getClass() == WMQQMgr.class){
            result = new Action[] {
                new ModelAdapter.findInstance().RefreshAction(mqobject),
//                new ModelAdapter.findInstance().PropertiesAction(mqobject),
            };
        } else if (mqobject.getClass() == WMQCluster.class){
            result = new Action[] {
                new ModelAdapter.findInstance().RefreshAction(mqobject),
//                new ModelAdapter.findInstance().PropertiesAction(mqobject),
            };
        }

        return result;
    }
    
    public void getProperties(){
        SystemAction.get(PropertiesAction.class);
    }
    
    /** Creating an action for enabling/disabling Queue */
    private static class RefreshAction extends AbstractAction {       
        private String name;
        private String label;
        private String network;
        public RefreshAction(WMQObject obj){
            name = obj.getUniqueName();
            network = obj.getNetworkName();
            this.label = "Refresh";            
            putValue(Action.NAME, label);
        }
        
        public void actionPerformed(ActionEvent ae) {            
            HTreeTopComponent.refreshInstance(network);
        }        
    }
    /** Creating an action for properties pop-up */
    private static class PropertiesAction extends AbstractAction {       
        private String name;
        private String label;
        private String network;
        public PropertiesAction(WMQObject obj){
            name = obj.getUniqueName();
            network = obj.getNetworkName();
            this.label = "Properties";            
            putValue(Action.NAME, label);
        }
        
        public void actionPerformed(ActionEvent ae) {                
//            NodeExplorerTopComponent.findInstance().getProperties(name, network);
        }
        
    }    
    /** Creating an action for enabling/disabling Queue */
    private static class EnableAction extends AbstractAction {       
        private String name;
        private String label;
        private WMQQueue mqqu = null;
        public EnableAction(WMQObject obj){
            name = obj.getCaption(); 
            mqqu = (WMQQueue)obj;
            if (((Integer)mqqu.getAttribute("Inhibit Put")).intValue() == 0){
                this.label = "Put Disable";
            } else {
                this.label = "Put Enable";
            }
            putValue(Action.NAME, label);
        }
        
        public void actionPerformed(ActionEvent ae) {
            //TODO
            if (this.label == "Put Disable"){
                alterObject((WMQObject)mqqu, "Inhibit Put", Integer.valueOf(String.valueOf("1")));
            } else {
                alterObject((WMQObject)mqqu, "Inhibit Put", Integer.valueOf(String.valueOf("0")));
            }            
        }        
    } 
    /** Creating an action for starting/stopping channel */
    private static class StartAction extends AbstractAction {       
        private String name;
        private String label;
        WMQChannel mqch = null;
        public StartAction(WMQObject obj){
            name = obj.getCaption();
            mqch = (WMQChannel)obj; 
            if (((Integer)mqch.getStatus("Channel Status")).intValue() != 6){ // 'Stopped'                
                this.label = "Stop";
            } else {
                this.label = "Start";
            }          
            putValue(Action.NAME, label);
        }
        
        public void actionPerformed(ActionEvent ae) {
            // call routine in "ModelAdapter"
            ModelAdapter.findInstance().alterObject((WMQObject)mqch, "Channel Status", (Object)label);            
        }
        
    }
    
    /** Creating an action for browsing Queue */
    private static class BrowseAction extends AbstractAction {       
        private String name;
        private String label;
        private WMQQueue mqqu = null;
        public BrowseAction(WMQObject obj){
            name = obj.getCaption();
            this.label = "Browse";
            this.mqqu = (WMQQueue) obj;
            putValue(Action.NAME, label);
        }
        
        public void actionPerformed(ActionEvent ae) {
            //TODO            
            GuiAdapter.findInstance().browseMsgs(mqqu, false);
        }        
    }

    /** Creating an action for puting message to Queue */
    private static class PutAction extends AbstractAction {       
        private String name;
        private String label;
        private WMQQueue mqqu = null;
        public PutAction(WMQObject obj){
            name = obj.getCaption();
            this.label = "Put Msgs";
            mqqu = (WMQQueue)obj;
            putValue(Action.NAME, label);            
        }
        
        public void actionPerformed(ActionEvent ae) {
            //TODO            
            GuiAdapter.findInstance().openPut(mqqu);
        }        
    }
    
    private static class StatusPollAction extends AbstractAction {        
        private String label;
        private String nodeName;
        public StatusPollAction(RootNode node){
            nodeName = node.getName();
            this.label = "Status...";
            putValue(Action.NAME, label);            
        }        
        public void actionPerformed(ActionEvent ae) {            
            new StatusPoll(nodeName);          
            RootNode.refreshNode();
        }       
    }
 
       /** Creating an action for show/hide System Queues */
    private static class ShowAction extends AbstractAction {
        private String label;
        private Node node;
        public ShowAction(Node thisNode){
            this.node = thisNode;
            if (thisNode.getValue("system") == "hide"){
                this.label = "Show System";
            } else {
                this.label = "Hide System";
            }          
            putValue(Action.NAME, label);
        }        
        public void actionPerformed(ActionEvent ae) {
            if (this.node.getValue("system") == "hide"){
                this.node.setValue("system", "show");                       
            } else {
                this.node.setValue("system", "hide");                 
            }
            RootNode.refreshNode();
        }        
    }

}
