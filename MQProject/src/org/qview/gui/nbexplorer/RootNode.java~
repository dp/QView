/*
 * RootNode.java
 *
 * Based on the 'PropNode' class, Netbeans project,
 * created on June 13, 2005, 1:20 PM
 *
 * This node represents the root node of the org.openide.nodes.Node object class,
 * and is fed into the node explorer 'NodeExplorer'.
 */

package org.myorg.gui.nbnode;

import java.awt.event.ActionEvent;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.ResourceBundle;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.myorg.gui.hypertree.HTreeTopComponent;
import org.myorg.model.GuiAdapter;
import org.myorg.mqinterface.Discovery;
import org.myorg.model.ConnectPoint;
import org.myorg.model.ObjectRepository;
import org.myorg.mqinterface.StatusPoll;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.actions.NewAction;
import org.openide.actions.OpenLocalExplorerAction;
import org.openide.actions.PropertiesAction;
import org.openide.actions.ToolsAction;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.nodes.Sheet;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;
import org.openide.util.actions.SystemAction;


import org.openide.util.datatransfer.NewType;
/**
 *
 * @author Administrator
 */
public class RootNode extends AbstractNode {
    private static ResourceBundle bundle = NbBundle.getBundle(RootNode.class);    
    private static RootNode rootNode;
    private static String topName = "MQ Environment";
    private static String defaultConnectName = "MQ Network";
    private HashMap NBNodes = new HashMap();
    private ChangeListener listener;
    private String key;
//    private static ConnectPoint cp;
    public RootNode() {
        super(new Tree(topName));
        this.setValue("nodeType", "Top");
        this.setValue("networkName", topName);
        setIconBase("org/myorg/gui/TopIcon");
        setName(topName);
        setDisplayName(topName);
        this.key = this.getName();
        setShortDescription(bundle.getString("HINT_NBNode"));
//        this.setHidden(true);
        NBNodes.put(this.getName(), this);
    }
   /* Constructors with Children.Keys refers to the 'Tree' class to extrapolate children
    */
    public RootNode(String key, Children.Keys newKeys) {
        super(newKeys);
        this.key = key;
        super.setName(key);
        this.setValue("nodeType", "ConnectPoint");
        this.setValue("networkName", key);
        setShortDescription(bundle.getString("HINT_ConnectPoint"));
        setIconBase("org/myorg/gui/ConnectPointIcon");        
        RootNode.findInstance().addToNBNodes(this.getName(), this);
    }
    
//    public String getValue(String key){
//        return this.getValue();
//    }
    
    public Action[] getActions(boolean context) {
        Action[] result;
        if (this == rootNode) {
            result = new Action[] {
            SystemAction.get(RefreshNodeAction.class),                    
//                    new ShowAction(),                    
//                    null,
                    SystemAction.get(NewAction.class),                                   
            };
        } else {
            result = new Action[] {
            SystemAction.get(RefreshNodeAction.class),                    
                    new DiscoverAction(this),
                    new StatusPollAction(this),
                    null,
//                    new ShowAction(),
                    SystemAction.get(OpenLocalExplorerAction.class),
                    null,
                    SystemAction.get(NewAction.class),
                    new RenameAction(this),
                    new DestroyAction(this),
//                    new cleanUnmappedMgrsAction(this),
                    SystemAction.get(ToolsAction.class),
                    null,                   
                    SystemAction.get(PropertiesAction.class),
            };
        }
            
        return result;
    }
    public HelpCtx getHelpCtx() {
        return new HelpCtx("org.myorg.gui.nbnode");
    }
    public Node cloneNode() {
        return new RootNode();
    }
    
    protected Sheet createSheet() {    
        Sheet cleanSheet = super.createSheet();
        PropSheet propSheet = new PropSheet(cleanSheet, this);
        Sheet sheet = propSheet.getPropSheet();
        PropertiesNotifier.addChangeListener(listener = new
                ChangeListener() {
            public void stateChanged(ChangeEvent ev) {
                firePropertyChange("value", null, null);
            }
        });
        return sheet;
    }
    protected Sheet refreshSheet() { 
        Sheet sheet = this.getSheet();        
        PropSheet propSheet = new PropSheet(sheet, this);
        return sheet;        
    }
    protected void finalize() throws Throwable {
        super.finalize();
        if (listener != null)
            PropertiesNotifier.removeChangeListener(listener);
    }
   
    public NewType[] getNewTypes() {
        return new NewType[] { new NewType() {
            public String getName() {
                return bundle.getString("LBL_NewProp");
            }
            public HelpCtx getHelpCtx() {
                return new HelpCtx("org.myorg.gui.nbnode");
            }
            public void create() throws IOException {
                String title = "Create New Connect-Point";
                String msg = "New Connect-Point Name:";
                NotifyDescriptor.InputLine desc = new NotifyDescriptor.InputLine(msg, title);
                DialogDisplayer.getDefault().notify(desc);
                String key = desc.getInputText();
//                if ("".equals(key)) return;
//                msg = bundle.getString("MSG_NewProp_dialog_value");
//                desc = new NotifyDescriptor.InputLine(msg, title);
//                DialogDisplayer.getDefault().notify(desc);
//                String value = desc.getInputText();
                ConnectPoint cp = new ConnectPoint(key);
                PropertiesNotifier.changed();
            }
        } };
    }
    
    private static class DiscoverAction extends AbstractAction {        
        private String label;
        private String nodeName;
        public DiscoverAction(RootNode node){
            nodeName = node.getName();
            this.label = "Discover...";
            putValue(Action.NAME, label);            
        }        
        public void actionPerformed(ActionEvent ae) {            
            Discovery disc = new Discovery(nodeName);
            disc.start(); 
//            RootNode.refreshNode();
        }       
    }
    private static class StatusPollAction extends AbstractAction {        
        private String label;
        private String nodeName;
        public StatusPollAction(RootNode node){
            nodeName = node.getName();
            this.label = "Status...";
            putValue(Action.NAME, label);            
        }        
        public void actionPerformed(ActionEvent ae) {            
            StatusPoll nextPoll = new StatusPoll(nodeName);
            nextPoll.start();   
//            RootNode.refreshNode();
            GuiAdapter.refreshNode(nodeName);
        }       
    }    
//    private static class cleanUnmappedMgrsAction extends AbstractAction {        
//        private String label;
//        private String nodeName;
//        public cleanUnmappedMgrsAction(RootNode node){
//            nodeName = node.getName();
//            this.label = "Clear Unmapped";
//            putValue(Action.NAME, label);            
//        }        
//        public void actionPerformed(ActionEvent ae) {            
//            ObjectRepository.findInstance((String) this.getValue("networkName")).cleanUnmappedMgrs();
//            RootNode.refreshNode();
//        }       
//    }      
    private static class ShowAction extends AbstractAction {        
        private String label;
        public ShowAction(){            
            if (RootNode.findInstance().isHidden()) {
                this.label = "Show Top";
            } else {
                this.label = "Hide Top";
            }           
            putValue(Action.NAME, label);            
        }        
        public void actionPerformed(ActionEvent ae) {
            if (this.label == "Hide Top") {
                RootNode.findInstance().setHidden(true);
            } else {
                RootNode.findInstance().setHidden(false);
            }
            RootNode.refreshNode();
        }       
    }
    private static class RenameAction extends AbstractAction {        
        private String label;        
        private Node node;
        public RenameAction(RootNode thisNode){
            node = thisNode;            
            this.label = "Rename node";
            putValue(Action.NAME, label);            
        }        
        public void actionPerformed(ActionEvent ae) {            
            String title = "Rename Connect-Point";
            String msg = "New Connect-Point Name:";
            NotifyDescriptor.InputLine desc = new NotifyDescriptor.InputLine(msg, title);
            DialogDisplayer.getDefault().notify(desc);
            String key = desc.getInputText();
            node.setName(key);
        }       
    }
    private static class DestroyAction extends AbstractAction {        
        private String label;        
        private Node node;
        public DestroyAction(RootNode thisNode){
            node = thisNode;            
            this.label = "Destroy node";
            putValue(Action.NAME, label);            
        }        
        public void actionPerformed(ActionEvent ae) {            
            if (node.canDestroy()){
                try {
                    node.destroy();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }            
        }       
    }
        
    public boolean canRename() {
        return true;
    }
    public void setName(String nue) {
        if (this.getValue("nodeType") == "ConnectPoint"){
            ConnectPoint cp = ConnectPoint.findInstance(this.getName());
            cp.setName(nue);
            HTreeTopComponent.findInstance(this.getName()).close();
            HTreeTopComponent.findInstance(nue);
            RootNode.refreshNode();
        }        
    }
    public boolean canDestroy() {
        return true;
    }
    public void destroy() throws IOException {
        if (this.getValue("nodeType") == "ConnectPoint"){
            ConnectPoint.destroyInstance(this.getName());
            ObjectRepository.destroyInstance(this.getName());
            HTreeTopComponent.findInstance(this.getName()).close();
            RootNode.refreshNode();
        }
    }
    
    public void addToNBNodes(String key, Node node){
        NBNodes.put(key, node);
    }
    public Node getNBNode(String key){
        return (Node)NBNodes.get(key);
    }
    
    public static RootNode findInstance() {
        if (rootNode == null) {
            rootNode = new RootNode();
        }
        return rootNode;
    }
    
    public static RootNode refreshNode() {        
//        PropertiesNotifier.changed();
        HashMap NBNodeMap = findInstance().NBNodes;
        Iterator e = NBNodeMap.keySet().iterator();
        while (e.hasNext()){
            Node nextNode = (Node) NBNodeMap.get(e.next());
            if (nextNode.getClass() == ParentNode.class){
                ((ParentNode)nextNode).refreshSheet();
            } else if (nextNode.getClass() == LeafNode.class){
                ((LeafNode)nextNode).refreshSheet();
            }
        }
        return rootNode;
    }
    
    public static String getTopName(){
        return topName;
    }    
    public static String getDefaultName(){
        return defaultConnectName;
    }

}