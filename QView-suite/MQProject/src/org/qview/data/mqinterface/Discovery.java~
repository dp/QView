/*
 * Connect.java
 *
 * Created on 1 June 2006, 12:47
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package org.myorg.mqinterface;

import org.myorg.model.ConnectPoint;
import org.myorg.model.ObjectRepository;
import org.myorg.model.GuiAdapter;
import org.myorg.model.WMQCluster;
import org.myorg.model.WMQQueue;
import java.util.*;
import org.myorg.model.WMQQMgr;
import org.myorg.gui.nbnode.RootNode;
import org.openide.windows.TopComponent;
/**
 * 
 * 
 */
public class Discovery extends Thread {
    private static ObjectRepository repository;
    private ConnectPoint connectPt;
    private WMQQMgr qmgrObject = null;
    private WMQQueue queueObject = null;    
    private String hostName = "localhost";
    private Integer port = Integer.valueOf("1414");
    private String channel = "SYSTEM.ADMIN.SVRCONN";
    private String instName;
    
    public Discovery() {
        this(ConnectPoint.findInstance());
    }
    public Discovery(String conName) {
        this(ConnectPoint.findInstance(conName));
    }
    public Discovery(ConnectPoint cp) {       
        connectPt = cp;
        instName = cp.getName();
        
        if (cp.getDiscovery("Host") != null){
            hostName = (String) cp.getDiscovery("Host");
        } else {
            hostName = "localhost";
        }
        if (cp.getDiscovery("Port") != null){
            port = (Integer) cp.getDiscovery("Port");
        } else {
            port = Integer.valueOf("1414");
        }
        if (cp.getDiscovery("Channel") != null){
            channel = (String) cp.getDiscovery("Channel");
        } else {
            channel = "SYSTEM.DEF.SVRCONN";
        }
        
        repository = ObjectRepository.newInstance(instName, port, channel);    
    }
    
    public synchronized void run() {    
        System.out.println();
        System.out.println("*Discovering Network*");
        System.out.println("Channel : " + channel);
        
        repository = ObjectRepository.newInstance(instName, port, channel);    
        repository.reportQMgr((hostName + "(" + port + ")"), hostName, port);
            
        int maxThreads = 8;
        int iterations = 0;
        ThreadGroup threadgroup = new ThreadGroup(instName + "Discovery");

        while (repository.getUnmappedQMgr() != null){
            iterations = iterations + 1;
            WMQQMgr qMgr = repository.getUnmappedQMgr();    
            // thread routine.    
              if ((threadgroup.activeCount() < maxThreads) && (qMgr != null)){ 
//                if (qMgr != null){
                  MQObjectDiscover discover = new MQObjectDiscover(threadgroup, String.valueOf(iterations), qMgr);
                  qMgr.setUpdated("updating");
                  discover.start();                  
                  System.out.println("threads : " + threadgroup.activeCount());
              }                            
              if (repository.getUnmappedQMgr() == null){
                  while (threadgroup.activeCount()>0){
                      // loop
                  }
              } else {
                  // This is necessary, for some reason, to ensure the creation of a separate PCFMessageAgent
//                  try {
//                      this.sleep(100);
//                  } catch (InterruptedException ex) {
//                      ex.printStackTrace();
//                  }
              }
              
        }//while          
        
//        GuiAdapter.refreshNode(instName);
        StatusPoll nextPoll = new StatusPoll(instName);
        nextPoll.start();        
        connectPt.setTimer();        
  
//        repository.printAll();
    }
    
}
