/*
 * ConnectPoint.java
 *
 * Created on 30 May 2006, 13:19
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package org.myorg.model;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import org.myorg.mqinterface.MQObjectStatus;
import org.myorg.mqinterface.StatusPoll;

/**
 *
 * @author pzssw6
 */
public class ConnectPoint  implements Serializable {
    private static ConnectPoint instance;
    private static HashMap namedInstance = new HashMap();
    private static HashMap rootAttrMap = new HashMap(); 
    private ObjectRepository repository;
    private String name;
    private HashMap map = new HashMap();
    javax.swing.Timer timer = null;
    
    /** Creates a new instance of ConnectPoint */
    public ConnectPoint() {        
        this.name = "MQ Network";
        map.put("Name", "MQ Network");
        map.put("Host", "localhost");
        map.put("Port", Integer.valueOf("1414")));
        map.put("Channel", "SYSTEM.DEF.SVRCONN");
        map.put("Q Threshold Critical", "90%");
        map.put("Q Threshold Warning", "75%");
        map.put("Monitoring Enabled", Integer.valueOf("1"));
        map.put("Monitoring Interval", Integer.valueOf("60"))); 
        instance = this;
        if (rootAttrMap.isEmpty()){
            rootAttrMap.put("Admin Enabled", Integer.valueOf("0"));
        }  
    }
    public ConnectPoint(String newName) {
        this();        
        this.name = newName;
        repository = ObjectRepository.findInstance(newName);
        map.put("Name", newName);
        namedInstance.put(newName, this);       
    }
    public ConnectPoint(String newName, Integer newPort) {
        this();        
        this.name = newName;
        repository = ObjectRepository.findInstance(newName);
        map.put("Name", newName);
        map.put("Host", newName);
        map.put("Port", newPort);
        namedInstance.put(newName, this);        
    }
    public ConnectPoint(String newName, String host, Integer port, String channel) {
        this();
        this.name = newName;
        repository = ObjectRepository.findInstance(newName);
        map.put("Name", newName);
        map.put("Host", host);
        map.put("Port", port);
        map.put("Channel", channel);
        namedInstance.put(newName, this);
    }
    
    /** reinstantiates a saved ConnectPoint HashMap */
//    public void setMap(HashMap savedMap){
//        this.map = savedMap;
//    }
    
//    public HashMap getMap(){
//        return this.map;
//    }
    

    public void setName(String newName){
        String oldName = this.name;
        this.name = newName;
        map.put("Name", newName);
        ConnectPoint cp = (ConnectPoint)namedInstance.remove(oldName);
        namedInstance.put(newName, this);
    }
    public String getName(){
        return this.name;
    }
//    public Integer getPort(){
//        return (Integer) map.get("Port");
//    }
//    public String getChl(){
//        return (String) map.get("Channel");
//    }
    
    public void setDiscovery(String key, Object value){        
        this.map.put(key, value);        
    }
    public Object getDiscovery(String key){
        return this.map.get(key);
    }    
    public HashMap getDiscoveryMap(){
        return (HashMap) this.map.clone();
    }
 
    public static void setRootAttr(String key, Object value){
        rootAttrMap.remove(key);
        System.out.println("refresh Props : " + value.toString());
        rootAttrMap.put(key, value);
        if (key == "Admin Enabled"){
            System.out.println("refresh Props...............");
            GuiAdapter.findInstance().refreshProps();            
        }
    }
    public static Object getRootAttr(String key){               
        return rootAttrMap.get(key);
    }    
    public static HashMap getRootAttrMap(){        
        return (HashMap) rootAttrMap.clone();
    }
     
    public static ConnectPoint findInstance(){
        if (instance != null) {
            return instance;
        } else {
            return new ConnectPoint();
        }  
    }
    public static ConnectPoint findInstance(String thisName){
        if (namedInstance.containsKey(thisName)){
            return (ConnectPoint) namedInstance.get(thisName);
        } else {
            return new ConnectPoint(thisName);
        }        
    }
    public static void destroyInstance(String cpName){
        namedInstance.remove(cpName);
    }
    
    public static ArrayList getConnectPoints(){
        ArrayList list = new ArrayList();
        Iterator e = namedInstance.keySet().iterator();        
        while (e.hasNext()) {            
            list.add(e.next());               
        }        
        return list;
    }
    
    public void setTimer(){
        if (timer != null){
            timer.stop();
            timer.removeActionListener(timer.getActionListeners()[0]);            
        }            
        Integer intvl;
        int interval = 0;
        intvl = (Integer)this.getDiscovery("Monitoring Interval");
        if (intvl != null){
            interval = intvl.intValue();
        }
        if (interval > 1){
            System.out.println("Made it to timer... " + interval);
            timer = new javax.swing.Timer(interval*1000, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                  new StatusPoll(name);                  
                  GuiAdapter.findInstance().refreshNode(name);
                }
            });
            timer.start();
        }        
    }
    
}
