package org.qview.gui.browse;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import javax.swing.JOptionPane;
import org.qview.control.DataGuiAdapter;
import org.qview.data.ObjectRepository;
import org.qview.data.mqmodel.WMQQMgr;
import org.qview.data.mqmodel.WMQQueue;
import org.openide.ErrorManager;
import org.openide.util.NbBundle;
import org.openide.util.Utilities;
import org.openide.windows.Mode;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
public class BrowseTopComponent extends TopComponent {
    
    private static BrowseTopComponent instance;
    private static final long serialVersionUID = 1L;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "org/qview/gui/browse.gif";
    private static final String MODE = "editor"; //open mode
    private static final String PREFERRED_ID = "BrowseTopComponent";
    
    private String qName;
    private String qmgrUniqueName;
    private String networkName;
    private ArrayList messageList = new ArrayList();
    private HashMap nextMessage = new HashMap();
    
    public BrowseTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(BrowseTopComponent.class, "CTL_BrowseTopComponent"));
        setToolTipText(NbBundle.getMessage(BrowseTopComponent.class, "HINT_BrowseTopComponent"));        
        setIcon(Utilities.loadImage(ICON_PATH, true));       
    }

    public void open() {
        Mode m = WindowManager.getDefault().findMode(MODE);
        m.dockInto(this);
        super.open();
    }

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckConvert = new javax.swing.JCheckBox();
        jCheckMQMD = new javax.swing.JCheckBox();
        jCheckHex = new javax.swing.JCheckBox();
        jLabelNm = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextOut = new javax.swing.JTextArea();
        browseButton = new javax.swing.JButton();
        QCombo = new javax.swing.JComboBox();
        MgrCombo = new javax.swing.JComboBox();
        jTextMsgId = new javax.swing.JTextField();
        jLabelNm1 = new javax.swing.JLabel();
        jCheckDestructive = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(jCheckConvert, "Convert");
        jCheckConvert.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckConvert.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jCheckConvert.setMargin(new java.awt.Insets(0, 0, 0, 0));

        org.openide.awt.Mnemonics.setLocalizedText(jCheckMQMD, "MQMD");
        jCheckMQMD.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckMQMD.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jCheckMQMD.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckMQMDItemStateChanged(evt);
            }
        });
        jCheckMQMD.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckMQMDStateChanged(evt);
            }
        });
        jCheckMQMD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jCheckMQMDMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jCheckMQMDMouseReleased(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jCheckHex, "Hex");
        jCheckHex.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckHex.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jCheckHex.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckHexItemStateChanged(evt);
            }
        });
        jCheckHex.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckHexStateChanged(evt);
            }
        });
        jCheckHex.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jCheckHexMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jCheckHexMouseReleased(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabelNm, "QMgr/Qu:");

        jTextOut.setColumns(20);
        jTextOut.setLineWrap(true);
        jTextOut.setRows(5);
        jScrollPane1.setViewportView(jTextOut);

        org.openide.awt.Mnemonics.setLocalizedText(browseButton, "Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });
        browseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                browseButtonMousePressed(evt);
            }
        });

        QCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<none selected>" }));
        QCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                QComboItemStateChanged(evt);
            }
        });

        MgrCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<none selected>" }));
        MgrCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                MgrComboItemStateChanged(evt);
            }
        });
        MgrCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                MgrComboMouseReleased(evt);
            }
        });

        jTextMsgId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextMsgIdActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabelNm1, "MsgId :");

        org.openide.awt.Mnemonics.setLocalizedText(jCheckDestructive, "Destructive");
        jCheckDestructive.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckDestructive.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jCheckDestructive.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jCheckDestructive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckDestructiveActionPerformed(evt);
            }
        });
        jCheckDestructive.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckDestructiveStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jCheckMQMD, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jCheckHex)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 252, Short.MAX_VALUE)
                .add(jCheckConvert, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 58, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jCheckDestructive)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(browseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 89, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabelNm, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(MgrCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(QCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 192, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(38, 38, 38)
                .add(jLabelNm1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTextMsgId, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelNm)
                    .add(MgrCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(QCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelNm1)
                    .add(jTextMsgId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jCheckMQMD)
                    .add(jCheckHex)
                    .add(jCheckDestructive)
                    .add(jCheckConvert)
                    .add(browseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 610, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void MgrComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_MgrComboItemStateChanged
        if (this.MgrCombo.getSelectedItem() != null) {
            String selectedMgrName = (String)this.MgrCombo.getSelectedItem();
            // retrieve qmgr object corresponding to qmgr name
            WMQQMgr mgr = (WMQQMgr) ObjectRepository.findInstance(this.networkName).getQMgrMatch(selectedMgrName);
            // WMQQMgr mgr = (WMQQMgr) ObjectRepository.findInstance(this.networkName).getFromRepository(this.mgrName);

            // set mgrName (unique name)
            this.qmgrUniqueName = mgr.getUniqueName();

            // set queue list for this qmgr
            if (mgr != null){
                this.QCombo.removeAllItems();
                ArrayList queues = mgr.getQueues();
                Iterator f = queues.iterator();
                while (f.hasNext()) {
                    WMQQueue qu = (WMQQueue) ObjectRepository.findInstance(this.networkName).getFromRepository((String)f.next());
                    this.QCombo.addItem((String)qu.getCaption());
                }//while
            }
        }
    }//GEN-LAST:event_MgrComboItemStateChanged

    private void MgrComboMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MgrComboMouseReleased

    }//GEN-LAST:event_MgrComboMouseReleased

    private void browseButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_browseButtonMousePressed
        
    }//GEN-LAST:event_browseButtonMousePressed

    private void jCheckMQMDMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckMQMDMouseReleased
        displayBrowse(); 
    }//GEN-LAST:event_jCheckMQMDMouseReleased

    private void jCheckHexMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckHexMouseReleased
        displayBrowse();      
    }//GEN-LAST:event_jCheckHexMouseReleased

    private void jCheckMQMDMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckMQMDMousePressed
        
    }//GEN-LAST:event_jCheckMQMDMousePressed

    private void jCheckHexMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckHexMousePressed
              
    }//GEN-LAST:event_jCheckHexMousePressed

    private void jCheckHexItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckHexItemStateChanged
        
    }//GEN-LAST:event_jCheckHexItemStateChanged

    private void jCheckMQMDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckMQMDItemStateChanged
        
    }//GEN-LAST:event_jCheckMQMDItemStateChanged

    private void jCheckHexStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckHexStateChanged
        
    }//GEN-LAST:event_jCheckHexStateChanged

    private void jCheckMQMDStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckMQMDStateChanged

    }//GEN-LAST:event_jCheckMQMDStateChanged

    private void jTextMsgIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextMsgIdActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jTextMsgIdActionPerformed

    private void jCheckDestructiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckDestructiveActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jCheckDestructiveActionPerformed

    private void jCheckDestructiveStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckDestructiveStateChanged
        if (this.jCheckDestructive.isSelected()){
            this.browseButton.setText("Get");
        } else {
            this.browseButton.setText("Browse");
        }
    }//GEN-LAST:event_jCheckDestructiveStateChanged

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        if (this.QCombo.getSelectedItem() != null) {
            ObjectRepository repository = ObjectRepository.findInstance(this.networkName);
            if (this.jCheckDestructive.isSelected() &&  this.jTextMsgId.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Queues may not be cleared unless Admin mode has been enabled", "Not Allowed", JOptionPane.PLAIN_MESSAGE);
            } else {
                WMQQueue queue = (WMQQueue) repository.getFromRepository(this.qmgrUniqueName + ".queue." + (String)this.QCombo.getSelectedItem());
                if (queue != null){
                    DataGuiAdapter.findInstance().browseMsgs(queue, getConvert(), this.jCheckDestructive.isSelected(), this.browseButton.getText().toLowerCase());
                }
            }
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void QComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_QComboItemStateChanged
        // qName works in one direction only - otherwise we lose the origionally selected queue
        // this.qName = (String)this.QCombo.getSelectedItem();
    }//GEN-LAST:event_QComboItemStateChanged
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox MgrCombo;
    private javax.swing.JComboBox QCombo;
    private javax.swing.JButton browseButton;
    private javax.swing.JCheckBox jCheckConvert;
    private javax.swing.JCheckBox jCheckDestructive;
    private javax.swing.JCheckBox jCheckHex;
    private javax.swing.JCheckBox jCheckMQMD;
    private javax.swing.JLabel jLabelNm;
    private javax.swing.JLabel jLabelNm1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextMsgId;
    private javax.swing.JTextArea jTextOut;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized BrowseTopComponent getDefault() {
        if (instance == null) {
            instance = new BrowseTopComponent();
        }
        return instance;
    }
    
    /**
     * Obtain the BrowseTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized BrowseTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            ErrorManager.getDefault().log(ErrorManager.WARNING, "Cannot find Browse component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof BrowseTopComponent) {
            return (BrowseTopComponent)win;
        }
        ErrorManager.getDefault().log(ErrorManager.WARNING, "There seem to be multiple components with the '" + PREFERRED_ID + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }
    
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }
    
    public void componentOpened() {
        // TODO add custom code on component opening
    }
    
    public void componentClosed() {
        // TODO add custom code on component closing
    }
    
    /** replaces this in object stream */
    public Object writeReplace() {
        return new ResolvableHelper();
    }
    
    protected String preferredID() {
        return PREFERRED_ID;
    }
    
    final static class ResolvableHelper implements Serializable {
        private static final long serialVersionUID = 1L;
        public Object readResolve() {
            return BrowseTopComponent.getDefault();
        }
    }
    
    public void displayBrowse(String text){
        this.jTextOut.setText(text);
//        this.jTextOut.append("\n> > > > > >   M E S S A G E   " + messageCount + "   < < < < < <\n");
    }
    
    public void displayBrowse(){
        this.jTextOut.setText("");
        if (!this.messageList.isEmpty()){
            String theMessage = null;
            String theHeader = null;
            int messageCount = 1;
            Iterator e = this.messageList.iterator();            
            while (e.hasNext()){                
                nextMessage = (HashMap) e.next();
                
                if (jCheckMQMD.isSelected()){
                    Iterator f = nextMessage.keySet().iterator();
                    while (f.hasNext()){
                        String key = (String) f.next();
                        if ((!key.equalsIgnoreCase("Message")) && (!key.equalsIgnoreCase("HexMessage"))){
                            theHeader = key + "\t" + (String) nextMessage.get(key);
                            this.jTextOut.append(theHeader + "\n");
                        }                       
                    }
                    this.jTextOut.append("\n");
                }
                if (jCheckHex.isSelected()){
                    theMessage = (String) nextMessage.get("HexMessage");
                } else {
                    theMessage = (String) nextMessage.get("Message");
                }                    
                this.jTextOut.append(theMessage);
                this.jTextOut.append("\n\n> > > > > >   E N D   O F   M E S S A G E   " + messageCount + "   < < < < < <\n\n");
                messageCount = messageCount + 1;
            }            
        }
    }
    
    public void setMessageList(ArrayList msgList){
        this.messageList = msgList;
        System.out.println("msgList   " + msgList);
    }    
    public void setText(String text){
        this.jTextOut.setText(text);
    }
    public void addText(String text){
        this.jTextOut.append("\n" + text);
    }
    public String getText(){
        return this.jTextOut.getText();
    }
    // Displays Q name
    public void setQueueName(String text){
        this.QCombo.setSelectedItem(text);
    }
    public void setQueue(WMQQueue queue){
        this.networkName = queue.getNetworkName();
        this.qName = queue.getCaption();
        this.qmgrUniqueName = queue.getParentQMName();
        WMQQMgr mgr = queue.getParentQM();
        this.setQmgrNames();
        this.MgrCombo.setSelectedItem(mgr.getCaption());
        this.QCombo.setSelectedItem(qName);
    }
    public void setQmgrNames(){
        ArrayList mgrs = (ObjectRepository.findInstance(this.networkName).getQMgrNames());
        // ArrayList mgrs = (ObjectRepository.findInstance(this.networkName).getQMgrUniqueNames());
        this.MgrCombo.removeAllItems();
        Iterator e = mgrs.iterator();            
        while (e.hasNext()) { 
            this.MgrCombo.addItem((String)e.next());
        }//while
    }
    public String getQueueName(){
        // return this.qName;
        return (String)this.QCombo.getSelectedItem();
    }  
    public WMQQueue getQueue(){
        return (WMQQueue) ObjectRepository.findInstance(this.networkName).getFromRepository(this.qName);
    }  
            
    public boolean getConvert(){
        return this.jCheckConvert.isSelected();
    }
    public boolean getMQMD(){
        return this.jCheckMQMD.isSelected();
    }
    public boolean getHex(){
        return this.jCheckHex.isSelected();
    }
    
}
