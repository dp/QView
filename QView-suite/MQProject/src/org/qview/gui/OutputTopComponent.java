package org.qview.gui;

import java.io.Serializable;
import org.openide.util.NbBundle;
import org.openide.util.Utilities;
import org.openide.windows.Mode;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
public class OutputTopComponent extends TopComponent {
    
    private static OutputTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "org/qview/gui/output.gif";
    private static final String MODE = "output"; //open mode
    private static final String PREFERRED_ID = "OutputTopComponent";
    
    private OutputTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(OutputTopComponent.class, "CTL_OutputTopComponent"));
        setToolTipText(NbBundle.getMessage(OutputTopComponent.class, "HINT_OutputTopComponent"));
        setIcon(Utilities.loadImage(ICON_PATH, true));
        instance = this;
    }
    // determines the mode in which the component is opened.
    public void open()
    {
        Mode m = WindowManager.getDefault().findMode(MODE);
        m.dockInto(this);
        super.open();
    }

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized OutputTopComponent getDefault() {
        if (instance == null) {
            instance = new OutputTopComponent();
        }
        return instance;
    }
    
    /**
     * Obtain the OutputTopComponent instance. Never call {@link #getDefault} directly!
     */
//    public static synchronized OutputTopComponent findInstance() {
//        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
//        if (win == null) {
//            ErrorManager.getDefault().log(ErrorManager.WARNING, "Cannot find Output component. It will not be located properly in the window system.");
//            return getDefault();
//        }
//        if (win instanceof OutputTopComponent) {
//            return (OutputTopComponent)win;
//        }
//        ErrorManager.getDefault().log(ErrorManager.WARNING, "There seem to be multiple components with the '" + PREFERRED_ID + "' ID. That is a potential source of errors and unexpected behavior.");
//        return getDefault();
//    }
    
    public static OutputTopComponent findInstance() {
        if (instance == null) {
            instance = new OutputTopComponent();            
        }
        return instance;
    }
    
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }
    
    public void componentOpened() {
        // TODO add custom code on component opening
    }
    
    public void componentClosed() {
        // TODO add custom code on component closing
    }
    
    /** replaces this in object stream */
    public Object writeReplace() {
        return new ResolvableHelper();
    }
    
    protected String preferredID() {
        return PREFERRED_ID;
    }
    
    final static class ResolvableHelper implements Serializable {
        private static final long serialVersionUID = 1L;
        public Object readResolve() {
            return OutputTopComponent.getDefault();
        }
    }
    
    public void setText(String text){
        this.jTextArea1.append("\n" + text);
    }
    public void addText(String text){
        this.jTextArea1.append(text);
    }
    
}
